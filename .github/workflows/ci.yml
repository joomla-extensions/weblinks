name: CI Pipeline

on:
  push:
    branches: [ main ]
  pull_request:

env:
  PHP_VERSION: "8.3"
  NODE_VERSION: "20"

jobs:
  composer:
    name: Composer Install
    runs-on: ubuntu-latest
    container: joomlaprojects/docker-images:php8.3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Composer packages
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --ignore-platform-reqs

      - name: Verify Robo is installed
        run: |
          if [ -f "vendor/bin/robo" ]; then
            echo "Robo is installed successfully"
            vendor/bin/robo --version
          else
            echo "ERROR: Robo is not installed. Check your composer.json dependencies."
            exit 1
          fi

  phpcs:
    name: PHP Code Sniffer
    runs-on: ubuntu-latest
    container: joomlaprojects/docker-images:php8.3
    needs: [composer]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Composer dependencies from cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Verify dependencies exist
        run: |
          if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
            echo "Composer dependencies not found, installing..."
            composer install --no-progress --ignore-platform-reqs
          fi

      - name: Run PHP-CS-Fixer and PHPCS
        run: |
          echo "Start time: $(date)"
          ./vendor/bin/php-cs-fixer fix -vvv --dry-run --diff
          ./vendor/bin/phpcs --extensions=php -p --standard=ruleset.xml src/
          echo "End time: $(date)"

  npm:
    name: NPM Install
    runs-on: ubuntu-latest
    container: node:20-bullseye-slim
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci

  prepare_tests:
    name: Prepare Tests
    runs-on: ubuntu-latest
    container: joomlaprojects/docker-images:cypress8.2
    needs: [composer, npm]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Composer dependencies from cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Verify and install Composer dependencies if missing
        run: |
          if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ] || [ ! -f "vendor/bin/robo" ]; then
            echo "Composer dependencies missing or incomplete, installing..."
            composer install --no-progress --ignore-platform-reqs
          fi
          
          # Verify Robo is available
          if [ ! -f "vendor/bin/robo" ]; then
            echo "ERROR: vendor/bin/robo not found after installation"
            exit 1
          fi

      - name: Restore NPM cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM dependencies
        run: npm ci

      - name: Install Cypress using GitHub Action
        uses: cypress-io/github-action@v6
        with:
          runTests: false
          install: true

      - name: Prepare Test Environment
        run: |
          echo "=== Preparing test environment ==="
          
          # Only move cypress config if it exists
          if [ -f "cypress.config.dist.js" ]; then
            mv cypress.config.dist.js cypress.config.js
            echo "✓ Cypress config file moved"
          fi
          
          # Verify Cypress is available
          npx cypress --version
          
          # Run robo build (essential step)
          echo "Running robo build..."
          vendor/bin/robo build
          echo "✓ Robo build completed"
          
          # Download Joomla nightly build
          echo "Downloading Joomla nightly build..."
          curl -o joomla.tar.zst -L https://developer.joomla.org/download-nightly.php/stable/debug/full/joomla.tar.zst
          
          # Verify download
          if [ ! -f "joomla.tar.zst" ]; then
            echo "ERROR: Failed to download Joomla"
            exit 1
          fi
          
          # Extract Joomla
          echo "Extracting Joomla..."
          tar xfa joomla.tar.zst
          rm joomla.tar.zst
          echo "✓ Joomla prepared successfully"
          
          # List built artifacts
          echo "Built artifacts:"
          ls -la dist/ || echo "No dist directory found"
          ls -la || echo "No files in root directory"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
          if-no-files-found: warn

  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    container: joomlaprojects/docker-images:php8.3
    needs: [prepare_tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Composer dependencies from cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Verify dependencies exist
        run: |
          if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
            echo "Composer dependencies not found, installing..."
            composer install --no-progress --ignore-platform-reqs
          fi

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse
        continue-on-error: true

  phpunit:
    name: PHPUnit
    runs-on: ubuntu-latest
    container: joomlaprojects/docker-images:php8.3
    needs: [prepare_tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Restore Composer dependencies from cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Verify dependencies exist
        run: |
          if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
            echo "Composer dependencies not found, installing..."
            composer install --no-progress --ignore-platform-reqs
          fi

      - name: Run PHPUnit
        run: vendor/bin/phpunit

  system_tests_mysql:
    name: System Tests (MySQL)
    runs-on: ubuntu-latest
    container: joomlaprojects/docker-images:cypress8.2
    needs: [prepare_tests]
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_USER: joomla_ut
          MYSQL_PASSWORD: joomla_ut
          MYSQL_ROOT_PASSWORD: joomla_ut
          MYSQL_DATABASE: test_joomla
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Restore Composer dependencies from cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Verify dependencies exist
        run: |
          if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
            echo "Composer dependencies not found, installing..."
            composer install --no-progress --ignore-platform-reqs
          fi

      - name: Restore NPM cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM dependencies
        run: npm ci

      - name: Install Cypress using GitHub Action
        uses: cypress-io/github-action@v6
        with:
          runTests: false
          install: true

      - name: Download and extract Joomla
        run: |
          echo "Downloading Joomla nightly build..."
          curl -o joomla.tar.zst -L https://developer.joomla.org/download-nightly.php/stable/debug/full/joomla.tar.zst
          
          # Verify download
          if [ ! -f "joomla.tar.zst" ]; then
            echo "ERROR: Failed to download Joomla"
            exit 1
          fi
          
          # Extract Joomla
          echo "Extracting Joomla..."
          tar xfa joomla.tar.zst
          rm joomla.tar.zst

      - name: Run MySQL System Tests
        run: |
          mkdir -p /tests/www/mysql/
          
          # Copy Joomla files to test directory
          cp -r ./* /tests/www/mysql/ || true
          
          # Find the package file (check multiple possible locations and names)
          if [ -f "dist/pkg-weblinks-current.zip" ]; then
            echo "Found package in dist/pkg-weblinks-current.zip"
            cp dist/pkg-weblinks-current.zip /tests/www/mysql/
          elif [ -f "pkg-weblinks-current.zip" ]; then
            echo "Found package in pkg-weblinks-current.zip"
            cp pkg-weblinks-current.zip /tests/www/mysql/
          else
            echo "ERROR: No package file found. Looking for pkg-weblinks-current.zip"
            echo "Available files in dist/:"
            ls -la dist/ 2>/dev/null || echo "dist/ directory doesn't exist"
            echo "Available zip files:"
            find . -name "*.zip" -type f
            exit 1
          fi
          
          cd /tests/www/mysql/
          
          # Start Apache in background
          apache2ctl -D FOREGROUND &
          APACHE_PID=$!
          
          # Wait for MySQL to be ready
          echo "Waiting for MySQL to be ready..."
          for i in {1..30}; do
            if mysqladmin ping -h mysql -u root -pjoomla_ut --silent; then
              echo "MySQL is ready!"
              break
            fi
            echo "Waiting for MySQL... attempt $i"
            sleep 2
          done

          # Install Joomla
          php installation/joomla.php install --verbose --site-name="Joomla CMS test" --admin-email=admin@example.org --admin-username=ci-admin --admin-user="jane doe" --admin-password=joomla-17082005 --db-type=mysqli --db-host=mysql --db-user=joomla_ut --db-pass=joomla_ut --db-name=test_joomla --db-prefix=mysql_
          
          php cli/joomla.php config:set debug=true error_reporting=maximum
          
          # Install the package
          php cli/joomla.php extension:install --path=/tests/www/mysql/pkg-weblinks-current.zip
          
          chmod -R 777 /tests/www/mysql/
          chown -R www-data /tests/www/mysql/
          
          cd $GITHUB_WORKSPACE
          npx cypress run --browser=firefox --e2e --env cmsPath=/tests/www/mysql,db_type=mysqli,db_host=mysql,db_name=test_joomla,db_user=joomla_ut,db_password=joomla_ut,db_prefix=mysql_

  system_tests_postgres:
    name: System Tests (PostgreSQL)
    runs-on: ubuntu-latest
    container: joomlaprojects/docker-images:cypress8.2
    needs: [prepare_tests]
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: joomla_ut
          POSTGRES_DB: test_joomla
        options: >-
          --health-cmd="pg_isready"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: .

      - name: Restore Composer dependencies from cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Verify dependencies exist
        run: |
          if [ ! -d "vendor" ] || [ ! -f "vendor/autoload.php" ]; then
            echo "Composer dependencies not found, installing..."
            composer install --no-progress --ignore-platform-reqs
          fi

      - name: Restore NPM cache
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install NPM dependencies
        run: npm ci

      - name: Install Cypress using GitHub Action
        uses: cypress-io/github-action@v6
        with:
          runTests: false
          install: true

      - name: Download and extract Joomla
        run: |
          echo "Downloading Joomla nightly build..."
          curl -o joomla.tar.zst -L https://developer.joomla.org/download-nightly.php/stable/debug/full/joomla.tar.zst
          
          # Verify download
          if [ ! -f "joomla.tar.zst" ]; then
            echo "ERROR: Failed to download Joomla"
            exit 1
          fi
          
          # Extract Joomla
          echo "Extracting Joomla..."
          tar xfa joomla.tar.zst
          rm joomla.tar.zst

      - name: Run PostgreSQL System Tests
        run: |
          mkdir -p /tests/www/pgsql/
          
          # Copy Joomla files to test directory
          cp -r ./* /tests/www/pgsql/ || true
          
          # Find the package file (check multiple possible locations and names)
          if [ -f "dist/pkg-weblinks-current.zip" ]; then
            echo "Found package in dist/pkg-weblinks-current.zip"
            cp dist/pkg-weblinks-current.zip /tests/www/pgsql/
          elif [ -f "pkg-weblinks-current.zip" ]; then
            echo "Found package in pkg-weblinks-current.zip"
            cp pkg-weblinks-current.zip /tests/www/pgsql/
          else
            echo "ERROR: No package file found. Looking for pkg-weblinks-current.zip"
            echo "Available files in dist/:"
            ls -la dist/ 2>/dev/null || echo "dist/ directory doesn't exist"
            echo "Available zip files:"
            find . -name "*.zip" -type f
            exit 1
          fi
          
          cd /tests/www/pgsql/
          
          # Start Apache in background
          apache2ctl -D FOREGROUND &
          APACHE_PID=$!
          
          # Wait for PostgreSQL to be ready
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..30}; do
            if PGPASSWORD=joomla_ut pg_isready -h postgres -U root; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... attempt $i"
            sleep 2
          done

          # Install Joomla
          php installation/joomla.php install --verbose --site-name="Joomla CMS test" --admin-email=admin@example.org --admin-username=ci-admin --admin-user="jane doe" --admin-password=joomla-17082005 --db-type=pgsql --db-host=postgres --db-user=root --db-pass=joomla_ut --db-name=test_joomla --db-prefix=pgsql_
          
          php cli/joomla.php config:set debug=true error_reporting=maximum
          
          # Install the package
          php cli/joomla.php extension:install --path=/tests/www/pgsql/pkg-weblinks-current.zip
          
          chmod -R 777 /tests/www/pgsql/
          chown -R www-data /tests/www/pgsql/
          
          cd $GITHUB_WORKSPACE
          npx cypress run --browser=firefox --e2e --env cmsPath=/tests/www/pgsql,db_type=pgsql,db_host=postgres,db_name=test_joomla,db_user=root,db_password=joomla_ut,db_prefix=pgsql_

  artifacts_system_tests:
    name: Upload Artifacts on Failure
    runs-on: ubuntu-latest
    needs: [system_tests_mysql, system_tests_postgres]
    if: failure() && (needs.system_tests_mysql.result == 'failure' || needs.system_tests_postgres.result == 'failure')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: system-test-failures
          path: |
            tests/cypress/output/
            cypress/screenshots/
            cypress/videos/
          if-no-files-found: ignore
